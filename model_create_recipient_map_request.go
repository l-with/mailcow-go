/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CreateRecipientMapRequest struct for CreateRecipientMapRequest
type CreateRecipientMapRequest struct {
	// 1 for a active user account 0 for a disabled user account
	Active *float32 `json:"active,omitempty"`
	// the email address that should receive the forwarded emails
	RecipientMapNew *string `json:"recipient_map_new,omitempty"`
	// the email address which emails should be forwarded
	RecipientMapOld *string `json:"recipient_map_old,omitempty"`
}

// NewCreateRecipientMapRequest instantiates a new CreateRecipientMapRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRecipientMapRequest() *CreateRecipientMapRequest {
	this := CreateRecipientMapRequest{}
	return &this
}

// NewCreateRecipientMapRequestWithDefaults instantiates a new CreateRecipientMapRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRecipientMapRequestWithDefaults() *CreateRecipientMapRequest {
	this := CreateRecipientMapRequest{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateRecipientMapRequest) GetActive() float32 {
	if o == nil || o.Active == nil {
		var ret float32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecipientMapRequest) GetActiveOk() (*float32, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateRecipientMapRequest) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given float32 and assigns it to the Active field.
func (o *CreateRecipientMapRequest) SetActive(v float32) {
	o.Active = &v
}

// GetRecipientMapNew returns the RecipientMapNew field value if set, zero value otherwise.
func (o *CreateRecipientMapRequest) GetRecipientMapNew() string {
	if o == nil || o.RecipientMapNew == nil {
		var ret string
		return ret
	}
	return *o.RecipientMapNew
}

// GetRecipientMapNewOk returns a tuple with the RecipientMapNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecipientMapRequest) GetRecipientMapNewOk() (*string, bool) {
	if o == nil || o.RecipientMapNew == nil {
		return nil, false
	}
	return o.RecipientMapNew, true
}

// HasRecipientMapNew returns a boolean if a field has been set.
func (o *CreateRecipientMapRequest) HasRecipientMapNew() bool {
	if o != nil && o.RecipientMapNew != nil {
		return true
	}

	return false
}

// SetRecipientMapNew gets a reference to the given string and assigns it to the RecipientMapNew field.
func (o *CreateRecipientMapRequest) SetRecipientMapNew(v string) {
	o.RecipientMapNew = &v
}

// GetRecipientMapOld returns the RecipientMapOld field value if set, zero value otherwise.
func (o *CreateRecipientMapRequest) GetRecipientMapOld() string {
	if o == nil || o.RecipientMapOld == nil {
		var ret string
		return ret
	}
	return *o.RecipientMapOld
}

// GetRecipientMapOldOk returns a tuple with the RecipientMapOld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecipientMapRequest) GetRecipientMapOldOk() (*string, bool) {
	if o == nil || o.RecipientMapOld == nil {
		return nil, false
	}
	return o.RecipientMapOld, true
}

// HasRecipientMapOld returns a boolean if a field has been set.
func (o *CreateRecipientMapRequest) HasRecipientMapOld() bool {
	if o != nil && o.RecipientMapOld != nil {
		return true
	}

	return false
}

// SetRecipientMapOld gets a reference to the given string and assigns it to the RecipientMapOld field.
func (o *CreateRecipientMapRequest) SetRecipientMapOld(v string) {
	o.RecipientMapOld = &v
}

func (o CreateRecipientMapRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.RecipientMapNew != nil {
		toSerialize["recipient_map_new"] = o.RecipientMapNew
	}
	if o.RecipientMapOld != nil {
		toSerialize["recipient_map_old"] = o.RecipientMapOld
	}
	return json.Marshal(toSerialize)
}

type NullableCreateRecipientMapRequest struct {
	value *CreateRecipientMapRequest
	isSet bool
}

func (v NullableCreateRecipientMapRequest) Get() *CreateRecipientMapRequest {
	return v.value
}

func (v *NullableCreateRecipientMapRequest) Set(val *CreateRecipientMapRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecipientMapRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecipientMapRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecipientMapRequest(val *CreateRecipientMapRequest) *NullableCreateRecipientMapRequest {
	return &NullableCreateRecipientMapRequest{value: val, isSet: true}
}

func (v NullableCreateRecipientMapRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecipientMapRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
