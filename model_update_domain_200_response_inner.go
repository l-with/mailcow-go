/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UpdateDomain200ResponseInner struct for UpdateDomain200ResponseInner
type UpdateDomain200ResponseInner struct {
	// contains request object
	Log  []interface{} `json:"log,omitempty"`
	Msg  *string       `json:"msg,omitempty"`
	Type *string       `json:"type,omitempty"`
}

// NewUpdateDomain200ResponseInner instantiates a new UpdateDomain200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDomain200ResponseInner() *UpdateDomain200ResponseInner {
	this := UpdateDomain200ResponseInner{}
	return &this
}

// NewUpdateDomain200ResponseInnerWithDefaults instantiates a new UpdateDomain200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDomain200ResponseInnerWithDefaults() *UpdateDomain200ResponseInner {
	this := UpdateDomain200ResponseInner{}
	return &this
}

// GetLog returns the Log field value if set, zero value otherwise.
func (o *UpdateDomain200ResponseInner) GetLog() []interface{} {
	if o == nil || o.Log == nil {
		var ret []interface{}
		return ret
	}
	return o.Log
}

// GetLogOk returns a tuple with the Log field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDomain200ResponseInner) GetLogOk() ([]interface{}, bool) {
	if o == nil || o.Log == nil {
		return nil, false
	}
	return o.Log, true
}

// HasLog returns a boolean if a field has been set.
func (o *UpdateDomain200ResponseInner) HasLog() bool {
	if o != nil && o.Log != nil {
		return true
	}

	return false
}

// SetLog gets a reference to the given []interface{} and assigns it to the Log field.
func (o *UpdateDomain200ResponseInner) SetLog(v []interface{}) {
	o.Log = v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *UpdateDomain200ResponseInner) GetMsg() string {
	if o == nil || o.Msg == nil {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDomain200ResponseInner) GetMsgOk() (*string, bool) {
	if o == nil || o.Msg == nil {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *UpdateDomain200ResponseInner) HasMsg() bool {
	if o != nil && o.Msg != nil {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *UpdateDomain200ResponseInner) SetMsg(v string) {
	o.Msg = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateDomain200ResponseInner) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDomain200ResponseInner) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateDomain200ResponseInner) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateDomain200ResponseInner) SetType(v string) {
	o.Type = &v
}

func (o UpdateDomain200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Log != nil {
		toSerialize["log"] = o.Log
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDomain200ResponseInner struct {
	value *UpdateDomain200ResponseInner
	isSet bool
}

func (v NullableUpdateDomain200ResponseInner) Get() *UpdateDomain200ResponseInner {
	return v.value
}

func (v *NullableUpdateDomain200ResponseInner) Set(val *UpdateDomain200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDomain200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDomain200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDomain200ResponseInner(val *UpdateDomain200ResponseInner) *NullableUpdateDomain200ResponseInner {
	return &NullableUpdateDomain200ResponseInner{value: val, isSet: true}
}

func (v NullableUpdateDomain200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDomain200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
