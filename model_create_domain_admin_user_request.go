/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CreateDomainAdminUserRequest struct for CreateDomainAdminUserRequest
type CreateDomainAdminUserRequest struct {
	// 1 for a active user account 0 for a disabled user account
	Active *float32 `json:"active,omitempty"`
	// the domains the user should be a admin of
	Domains *string `json:"domains,omitempty"`
	// domain admin user password
	Password *string `json:"password,omitempty"`
	// domain admin user password
	Password2 *string `json:"password2,omitempty"`
	// the username for the admin user
	Username *string `json:"username,omitempty"`
}

// NewCreateDomainAdminUserRequest instantiates a new CreateDomainAdminUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDomainAdminUserRequest() *CreateDomainAdminUserRequest {
	this := CreateDomainAdminUserRequest{}
	return &this
}

// NewCreateDomainAdminUserRequestWithDefaults instantiates a new CreateDomainAdminUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDomainAdminUserRequestWithDefaults() *CreateDomainAdminUserRequest {
	this := CreateDomainAdminUserRequest{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateDomainAdminUserRequest) GetActive() float32 {
	if o == nil || o.Active == nil {
		var ret float32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDomainAdminUserRequest) GetActiveOk() (*float32, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateDomainAdminUserRequest) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given float32 and assigns it to the Active field.
func (o *CreateDomainAdminUserRequest) SetActive(v float32) {
	o.Active = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *CreateDomainAdminUserRequest) GetDomains() string {
	if o == nil || o.Domains == nil {
		var ret string
		return ret
	}
	return *o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDomainAdminUserRequest) GetDomainsOk() (*string, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *CreateDomainAdminUserRequest) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given string and assigns it to the Domains field.
func (o *CreateDomainAdminUserRequest) SetDomains(v string) {
	o.Domains = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CreateDomainAdminUserRequest) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDomainAdminUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateDomainAdminUserRequest) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CreateDomainAdminUserRequest) SetPassword(v string) {
	o.Password = &v
}

// GetPassword2 returns the Password2 field value if set, zero value otherwise.
func (o *CreateDomainAdminUserRequest) GetPassword2() string {
	if o == nil || o.Password2 == nil {
		var ret string
		return ret
	}
	return *o.Password2
}

// GetPassword2Ok returns a tuple with the Password2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDomainAdminUserRequest) GetPassword2Ok() (*string, bool) {
	if o == nil || o.Password2 == nil {
		return nil, false
	}
	return o.Password2, true
}

// HasPassword2 returns a boolean if a field has been set.
func (o *CreateDomainAdminUserRequest) HasPassword2() bool {
	if o != nil && o.Password2 != nil {
		return true
	}

	return false
}

// SetPassword2 gets a reference to the given string and assigns it to the Password2 field.
func (o *CreateDomainAdminUserRequest) SetPassword2(v string) {
	o.Password2 = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *CreateDomainAdminUserRequest) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDomainAdminUserRequest) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateDomainAdminUserRequest) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *CreateDomainAdminUserRequest) SetUsername(v string) {
	o.Username = &v
}

func (o CreateDomainAdminUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Password2 != nil {
		toSerialize["password2"] = o.Password2
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableCreateDomainAdminUserRequest struct {
	value *CreateDomainAdminUserRequest
	isSet bool
}

func (v NullableCreateDomainAdminUserRequest) Get() *CreateDomainAdminUserRequest {
	return v.value
}

func (v *NullableCreateDomainAdminUserRequest) Set(val *CreateDomainAdminUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDomainAdminUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDomainAdminUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDomainAdminUserRequest(val *CreateDomainAdminUserRequest) *NullableCreateDomainAdminUserRequest {
	return &NullableCreateDomainAdminUserRequest{value: val, isSet: true}
}

func (v NullableCreateDomainAdminUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDomainAdminUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
