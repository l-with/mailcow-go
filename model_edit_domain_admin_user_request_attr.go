/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// EditDomainAdminUserRequestAttr struct for EditDomainAdminUserRequestAttr
type EditDomainAdminUserRequestAttr struct {
	// is the domain admin active or not
	Active *bool `json:"active,omitempty"`
	// the username of the domain admin, change this to change the username
	UsernameNew *string `json:"username_new,omitempty"`
	// a list of all domains managed by this domain admin
	Domains []string `json:"domains,omitempty"`
	// the new domain admin user password
	Password *string `json:"password,omitempty"`
	// the new domain admin user password for confirmation
	Password2 *string `json:"password2,omitempty"`
}

// NewEditDomainAdminUserRequestAttr instantiates a new EditDomainAdminUserRequestAttr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditDomainAdminUserRequestAttr() *EditDomainAdminUserRequestAttr {
	this := EditDomainAdminUserRequestAttr{}
	return &this
}

// NewEditDomainAdminUserRequestAttrWithDefaults instantiates a new EditDomainAdminUserRequestAttr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditDomainAdminUserRequestAttrWithDefaults() *EditDomainAdminUserRequestAttr {
	this := EditDomainAdminUserRequestAttr{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditDomainAdminUserRequestAttr) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditDomainAdminUserRequestAttr) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditDomainAdminUserRequestAttr) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditDomainAdminUserRequestAttr) SetActive(v bool) {
	o.Active = &v
}

// GetUsernameNew returns the UsernameNew field value if set, zero value otherwise.
func (o *EditDomainAdminUserRequestAttr) GetUsernameNew() string {
	if o == nil || o.UsernameNew == nil {
		var ret string
		return ret
	}
	return *o.UsernameNew
}

// GetUsernameNewOk returns a tuple with the UsernameNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditDomainAdminUserRequestAttr) GetUsernameNewOk() (*string, bool) {
	if o == nil || o.UsernameNew == nil {
		return nil, false
	}
	return o.UsernameNew, true
}

// HasUsernameNew returns a boolean if a field has been set.
func (o *EditDomainAdminUserRequestAttr) HasUsernameNew() bool {
	if o != nil && o.UsernameNew != nil {
		return true
	}

	return false
}

// SetUsernameNew gets a reference to the given string and assigns it to the UsernameNew field.
func (o *EditDomainAdminUserRequestAttr) SetUsernameNew(v string) {
	o.UsernameNew = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *EditDomainAdminUserRequestAttr) GetDomains() []string {
	if o == nil || o.Domains == nil {
		var ret []string
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditDomainAdminUserRequestAttr) GetDomainsOk() ([]string, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *EditDomainAdminUserRequestAttr) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []string and assigns it to the Domains field.
func (o *EditDomainAdminUserRequestAttr) SetDomains(v []string) {
	o.Domains = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EditDomainAdminUserRequestAttr) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditDomainAdminUserRequestAttr) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EditDomainAdminUserRequestAttr) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EditDomainAdminUserRequestAttr) SetPassword(v string) {
	o.Password = &v
}

// GetPassword2 returns the Password2 field value if set, zero value otherwise.
func (o *EditDomainAdminUserRequestAttr) GetPassword2() string {
	if o == nil || o.Password2 == nil {
		var ret string
		return ret
	}
	return *o.Password2
}

// GetPassword2Ok returns a tuple with the Password2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditDomainAdminUserRequestAttr) GetPassword2Ok() (*string, bool) {
	if o == nil || o.Password2 == nil {
		return nil, false
	}
	return o.Password2, true
}

// HasPassword2 returns a boolean if a field has been set.
func (o *EditDomainAdminUserRequestAttr) HasPassword2() bool {
	if o != nil && o.Password2 != nil {
		return true
	}

	return false
}

// SetPassword2 gets a reference to the given string and assigns it to the Password2 field.
func (o *EditDomainAdminUserRequestAttr) SetPassword2(v string) {
	o.Password2 = &v
}

func (o EditDomainAdminUserRequestAttr) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.UsernameNew != nil {
		toSerialize["username_new"] = o.UsernameNew
	}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Password2 != nil {
		toSerialize["password2"] = o.Password2
	}
	return json.Marshal(toSerialize)
}

type NullableEditDomainAdminUserRequestAttr struct {
	value *EditDomainAdminUserRequestAttr
	isSet bool
}

func (v NullableEditDomainAdminUserRequestAttr) Get() *EditDomainAdminUserRequestAttr {
	return v.value
}

func (v *NullableEditDomainAdminUserRequestAttr) Set(val *EditDomainAdminUserRequestAttr) {
	v.value = val
	v.isSet = true
}

func (v NullableEditDomainAdminUserRequestAttr) IsSet() bool {
	return v.isSet
}

func (v *NullableEditDomainAdminUserRequestAttr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditDomainAdminUserRequestAttr(val *EditDomainAdminUserRequestAttr) *NullableEditDomainAdminUserRequestAttr {
	return &NullableEditDomainAdminUserRequestAttr{value: val, isSet: true}
}

func (v NullableEditDomainAdminUserRequestAttr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditDomainAdminUserRequestAttr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
