/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DuplicateDKIMKeyRequest struct for DuplicateDKIMKeyRequest
type DuplicateDKIMKeyRequest struct {
	// the domain where the dkim key should be copied from
	FronDomain *string `json:"fron_domain,omitempty"`
	// the domain where the dkim key should be copied to
	ToDomain *string `json:"to_domain,omitempty"`
}

// NewDuplicateDKIMKeyRequest instantiates a new DuplicateDKIMKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDuplicateDKIMKeyRequest() *DuplicateDKIMKeyRequest {
	this := DuplicateDKIMKeyRequest{}
	return &this
}

// NewDuplicateDKIMKeyRequestWithDefaults instantiates a new DuplicateDKIMKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDuplicateDKIMKeyRequestWithDefaults() *DuplicateDKIMKeyRequest {
	this := DuplicateDKIMKeyRequest{}
	return &this
}

// GetFronDomain returns the FronDomain field value if set, zero value otherwise.
func (o *DuplicateDKIMKeyRequest) GetFronDomain() string {
	if o == nil || o.FronDomain == nil {
		var ret string
		return ret
	}
	return *o.FronDomain
}

// GetFronDomainOk returns a tuple with the FronDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateDKIMKeyRequest) GetFronDomainOk() (*string, bool) {
	if o == nil || o.FronDomain == nil {
		return nil, false
	}
	return o.FronDomain, true
}

// HasFronDomain returns a boolean if a field has been set.
func (o *DuplicateDKIMKeyRequest) HasFronDomain() bool {
	if o != nil && o.FronDomain != nil {
		return true
	}

	return false
}

// SetFronDomain gets a reference to the given string and assigns it to the FronDomain field.
func (o *DuplicateDKIMKeyRequest) SetFronDomain(v string) {
	o.FronDomain = &v
}

// GetToDomain returns the ToDomain field value if set, zero value otherwise.
func (o *DuplicateDKIMKeyRequest) GetToDomain() string {
	if o == nil || o.ToDomain == nil {
		var ret string
		return ret
	}
	return *o.ToDomain
}

// GetToDomainOk returns a tuple with the ToDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateDKIMKeyRequest) GetToDomainOk() (*string, bool) {
	if o == nil || o.ToDomain == nil {
		return nil, false
	}
	return o.ToDomain, true
}

// HasToDomain returns a boolean if a field has been set.
func (o *DuplicateDKIMKeyRequest) HasToDomain() bool {
	if o != nil && o.ToDomain != nil {
		return true
	}

	return false
}

// SetToDomain gets a reference to the given string and assigns it to the ToDomain field.
func (o *DuplicateDKIMKeyRequest) SetToDomain(v string) {
	o.ToDomain = &v
}

func (o DuplicateDKIMKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FronDomain != nil {
		toSerialize["fron_domain"] = o.FronDomain
	}
	if o.ToDomain != nil {
		toSerialize["to_domain"] = o.ToDomain
	}
	return json.Marshal(toSerialize)
}

type NullableDuplicateDKIMKeyRequest struct {
	value *DuplicateDKIMKeyRequest
	isSet bool
}

func (v NullableDuplicateDKIMKeyRequest) Get() *DuplicateDKIMKeyRequest {
	return v.value
}

func (v *NullableDuplicateDKIMKeyRequest) Set(val *DuplicateDKIMKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDuplicateDKIMKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDuplicateDKIMKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDuplicateDKIMKeyRequest(val *DuplicateDKIMKeyRequest) *NullableDuplicateDKIMKeyRequest {
	return &NullableDuplicateDKIMKeyRequest{value: val, isSet: true}
}

func (v NullableDuplicateDKIMKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDuplicateDKIMKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
