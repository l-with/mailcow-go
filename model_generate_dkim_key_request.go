/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// GenerateDKIMKeyRequest struct for GenerateDKIMKeyRequest
type GenerateDKIMKeyRequest struct {
	// the DKIM selector default dkim
	DkimSelector *string `json:"dkim_selector,omitempty"`
	// a list of domains for which a dkim key should be generated
	Domains *string `json:"domains,omitempty"`
	// the key size (1024 or 2048)
	KeySize *float32 `json:"key_size,omitempty"`
}

// NewGenerateDKIMKeyRequest instantiates a new GenerateDKIMKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateDKIMKeyRequest() *GenerateDKIMKeyRequest {
	this := GenerateDKIMKeyRequest{}
	return &this
}

// NewGenerateDKIMKeyRequestWithDefaults instantiates a new GenerateDKIMKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateDKIMKeyRequestWithDefaults() *GenerateDKIMKeyRequest {
	this := GenerateDKIMKeyRequest{}
	return &this
}

// GetDkimSelector returns the DkimSelector field value if set, zero value otherwise.
func (o *GenerateDKIMKeyRequest) GetDkimSelector() string {
	if o == nil || o.DkimSelector == nil {
		var ret string
		return ret
	}
	return *o.DkimSelector
}

// GetDkimSelectorOk returns a tuple with the DkimSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateDKIMKeyRequest) GetDkimSelectorOk() (*string, bool) {
	if o == nil || o.DkimSelector == nil {
		return nil, false
	}
	return o.DkimSelector, true
}

// HasDkimSelector returns a boolean if a field has been set.
func (o *GenerateDKIMKeyRequest) HasDkimSelector() bool {
	if o != nil && o.DkimSelector != nil {
		return true
	}

	return false
}

// SetDkimSelector gets a reference to the given string and assigns it to the DkimSelector field.
func (o *GenerateDKIMKeyRequest) SetDkimSelector(v string) {
	o.DkimSelector = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *GenerateDKIMKeyRequest) GetDomains() string {
	if o == nil || o.Domains == nil {
		var ret string
		return ret
	}
	return *o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateDKIMKeyRequest) GetDomainsOk() (*string, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *GenerateDKIMKeyRequest) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given string and assigns it to the Domains field.
func (o *GenerateDKIMKeyRequest) SetDomains(v string) {
	o.Domains = &v
}

// GetKeySize returns the KeySize field value if set, zero value otherwise.
func (o *GenerateDKIMKeyRequest) GetKeySize() float32 {
	if o == nil || o.KeySize == nil {
		var ret float32
		return ret
	}
	return *o.KeySize
}

// GetKeySizeOk returns a tuple with the KeySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateDKIMKeyRequest) GetKeySizeOk() (*float32, bool) {
	if o == nil || o.KeySize == nil {
		return nil, false
	}
	return o.KeySize, true
}

// HasKeySize returns a boolean if a field has been set.
func (o *GenerateDKIMKeyRequest) HasKeySize() bool {
	if o != nil && o.KeySize != nil {
		return true
	}

	return false
}

// SetKeySize gets a reference to the given float32 and assigns it to the KeySize field.
func (o *GenerateDKIMKeyRequest) SetKeySize(v float32) {
	o.KeySize = &v
}

func (o GenerateDKIMKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DkimSelector != nil {
		toSerialize["dkim_selector"] = o.DkimSelector
	}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.KeySize != nil {
		toSerialize["key_size"] = o.KeySize
	}
	return json.Marshal(toSerialize)
}

type NullableGenerateDKIMKeyRequest struct {
	value *GenerateDKIMKeyRequest
	isSet bool
}

func (v NullableGenerateDKIMKeyRequest) Get() *GenerateDKIMKeyRequest {
	return v.value
}

func (v *NullableGenerateDKIMKeyRequest) Set(val *GenerateDKIMKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateDKIMKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateDKIMKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateDKIMKeyRequest(val *GenerateDKIMKeyRequest) *NullableGenerateDKIMKeyRequest {
	return &NullableGenerateDKIMKeyRequest{value: val, isSet: true}
}

func (v NullableGenerateDKIMKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateDKIMKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
