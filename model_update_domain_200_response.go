/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UpdateDomain200Response struct for UpdateDomain200Response
type UpdateDomain200Response struct {
	Msg  *string `json:"msg,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewUpdateDomain200Response instantiates a new UpdateDomain200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDomain200Response() *UpdateDomain200Response {
	this := UpdateDomain200Response{}
	return &this
}

// NewUpdateDomain200ResponseWithDefaults instantiates a new UpdateDomain200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDomain200ResponseWithDefaults() *UpdateDomain200Response {
	this := UpdateDomain200Response{}
	return &this
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *UpdateDomain200Response) GetMsg() string {
	if o == nil || o.Msg == nil {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDomain200Response) GetMsgOk() (*string, bool) {
	if o == nil || o.Msg == nil {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *UpdateDomain200Response) HasMsg() bool {
	if o != nil && o.Msg != nil {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *UpdateDomain200Response) SetMsg(v string) {
	o.Msg = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateDomain200Response) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDomain200Response) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateDomain200Response) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateDomain200Response) SetType(v string) {
	o.Type = &v
}

func (o UpdateDomain200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDomain200Response struct {
	value *UpdateDomain200Response
	isSet bool
}

func (v NullableUpdateDomain200Response) Get() *UpdateDomain200Response {
	return v.value
}

func (v *NullableUpdateDomain200Response) Set(val *UpdateDomain200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDomain200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDomain200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDomain200Response(val *UpdateDomain200Response) *NullableUpdateDomain200Response {
	return &NullableUpdateDomain200Response{value: val, isSet: true}
}

func (v NullableUpdateDomain200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDomain200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
