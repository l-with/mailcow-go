/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CreateAlias401Response struct for CreateAlias401Response
type CreateAlias401Response struct {
	Type string `json:"type"`
	Msg  string `json:"msg"`
}

// NewCreateAlias401Response instantiates a new CreateAlias401Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAlias401Response(type_ string, msg string) *CreateAlias401Response {
	this := CreateAlias401Response{}
	this.Type = type_
	this.Msg = msg
	return &this
}

// NewCreateAlias401ResponseWithDefaults instantiates a new CreateAlias401Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAlias401ResponseWithDefaults() *CreateAlias401Response {
	this := CreateAlias401Response{}
	return &this
}

// GetType returns the Type field value
func (o *CreateAlias401Response) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateAlias401Response) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateAlias401Response) SetType(v string) {
	o.Type = v
}

// GetMsg returns the Msg field value
func (o *CreateAlias401Response) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *CreateAlias401Response) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *CreateAlias401Response) SetMsg(v string) {
	o.Msg = v
}

func (o CreateAlias401Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["msg"] = o.Msg
	}
	return json.Marshal(toSerialize)
}

type NullableCreateAlias401Response struct {
	value *CreateAlias401Response
	isSet bool
}

func (v NullableCreateAlias401Response) Get() *CreateAlias401Response {
	return v.value
}

func (v *NullableCreateAlias401Response) Set(val *CreateAlias401Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAlias401Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAlias401Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAlias401Response(val *CreateAlias401Response) *NullableCreateAlias401Response {
	return &NullableCreateAlias401Response{value: val, isSet: true}
}

func (v NullableCreateAlias401Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAlias401Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
